<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>高数求积分教学</title>
      <link href="/2023/02/17/%E9%AB%98%E6%95%B0%E6%B1%82%E7%A7%AF%E5%88%86%E6%95%99%E5%AD%A6/"/>
      <url>/2023/02/17/%E9%AB%98%E6%95%B0%E6%B1%82%E7%A7%AF%E5%88%86%E6%95%99%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2><span id="前言">前言</span></h2><p>欢迎来到计算最难部分，所谓一杯茶，一支笔，一道积分算一天。可见其难度，变化之灵活<br>在求积分的计算中主要有以下6中积分形式。分别是公式法的简单积分，凑微分法积分，分部积分，有理函数积分，三角相关积分，递推有关积分</p><h2><span id="简单公式积分">简单公式积分</span></h2><p>这里的求积分并不算难，但是对读者公式的要求程度要较大的要求<br>除去基本公式外这里补充10给必背公式<br><img src="https://s2.loli.net/2023/02/22/etFGIqOgDXJaWcS.png" alt><br>其中第7个公式有分母=（x^2-a^2）的扩展，读者可自行推导<br>再求积分的过程中要用到一些基本数学变形。比如因式分解，三角代换等。</p><h2><span id="凑微分法求积分">凑微分法求积分</span></h2><p>既然都写到这里了我就不得不点名批评一组积分公式，其行为简直不要太恶劣。<br><img src="https://s2.loli.net/2023/02/18/xoACGY8qWRUp7LM.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>长难句学习总结</title>
      <link href="/2023/02/16/%E9%95%BF%E9%9A%BE%E5%8F%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
      <url>/2023/02/16/%E9%95%BF%E9%9A%BE%E5%8F%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>写这一篇文章的意义就是我最进发现通过讲解的方式好像并不是一个好的学习长难句的方法主要原因是容易忘<br>在学习长难句的过程中我发现有两点非常重要<br>1：语法，这里是指语言的法则，就是要可以搞的懂这个部分是干啥用的。目前来说和我感觉主要有以下几个作用<br>1）：主干作用<br>这里说的就是句子的主干，五种基本句型。我这里把它理解为英语语言的基本逻辑。这里其实和汉语很像。所以只要主干部分翻译正确，那么应该拼接成一个主干句子没有问题。<br>2）：修饰作用<br>修饰作用力主要就是定语。因为定语修饰名词嘛，一般就副词修饰动词，总共就那么重要的否定副词。所以重点是名词的修饰<br>这个就很花里胡哨了，可以说非常的恶心。（外国人很喜欢写长句子，但是主干呢有很短，有时候补充也不多主要就爱装（个人观点）嘎嘎加修饰，恨不得一句话概括所有的细节。）回到正题。定语的修饰里最恶心的当属省略了，这里我时常翻车。<br>但是也不是无解：定语修饰标志性很强，不省略的话看先形词，省略的话注意所有ing和ed形式。<br>3）：补充作用<br>这个部分主要是同位语啊，破折号啊，状语啊<br>4）：结构作用<br>这个部分首当其冲的自然是并列，别的都不重要。倒装这种很容易辨识。但是并列的话，就一定要搞清楚并列的成分是什么<br>尤其是有的省略现象就更要小心小心再小心<br>2：单词，这里不但要求单个单词可以正确理解在句中的意思，词组也要能看出来，可惜词组这个东西太过于多样<br>有一定规律但感觉还不足也可以称之为语音法则。有的单词甚至于来源于词组。</p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有理数函数求积分通解</title>
      <link href="/2023/01/29/%E6%9C%89%E7%90%86%E6%95%B0%E6%B1%82%E7%A7%AF%E5%88%86%E9%80%9A%E8%A7%A3/"/>
      <url>/2023/01/29/%E6%9C%89%E7%90%86%E6%95%B0%E6%B1%82%E7%A7%AF%E5%88%86%E9%80%9A%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天发现一个有理数函数求积分的通解方法特此记录一下<br>首先我们观察分子和分母的最高阶把分式分为有理真分式和有理假分式<br>真分式分母最高阶比分子大，而相同或者小于分子则称为假分式。<br>假分式我们一般可以用多项式除法来化成真分式这里是一定可以除出来的，因为分子比分母高阶或同阶。<br>当变成真分式的时候，如果不能直接算，注意要把真分式展开。<br>因此我们需要对分母进行因式分解，这里推荐通过零点用大除法或者分组化的因式分解，然后展，注意展开原则。<br>如果无法对分母进行因式分解，但又是一个真分式，而且不能直接算，哈哈哈哈，这个时候一般就靠天分了笔者并没有找到通解。<br>努力构造函数，去凑微分，去加一减一，去. . . . 。当然有理函数求积分又很多种方法其中不乏又一些妙解。这里只是提供一种通解的方式。大家可以多多尝试别的方法。<br>毕竟发现新大陆。无论他是否美好都值得庆祝不是。</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高数求导教学</title>
      <link href="/2023/01/22/%E9%AB%98%E6%95%B0%E6%B1%82%E5%AF%BC%E6%95%99%E5%AD%A6/"/>
      <url>/2023/01/22/%E9%AB%98%E6%95%B0%E6%B1%82%E5%AF%BC%E6%95%99%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2><span id="前言">前言</span></h2><p>本教学要求读者有一定的知识储备，和做题经验。<br>记得求导之前先化简，比如lnf(x)/g(x)=lnf(x)-lng(x)</p><h2><span id="1利用导数定义求导">1.利用导数定义求导</span></h2><p>这个方法主要用于以下4给场景（标志一般为一个函数再某一个点可导，求函数在某一点的函数值）<br>这种求导一般是求某一个值<br>1：被求导的函数太过于复杂<br>2：被求导函数含有抽象函数<br>3：被求导函数不符合求导法则<br>4：分段函数分段点求导</p><h2><span id="2复合函数求导">2.复合函数求导</span></h2><p>复合函数求导主要是为了后面的积分换元做准备，所以再练习的时候要注意反向推导。<br>要做好复合函数求导需要熟练掌握以下两点要求：<br>1：求导法则<br>2：求导公式<br>这里再分享一个心得:优先大函数，从外到内层层递进。可以括号这种标志符。<br>再复合函数求导的过程中一定要注意计算方法，不要心急，一步一步求导从外到内。<br>这里是笔者结合后面积分总结的一些求导公式：<br><img src="https://s2.loli.net/2023/01/26/DEVK3YAaNeR42xT.jpg" alt></p><h2><span id="3隐函数求导">3.隐函数求导</span></h2><p>这里一般有两种情况：<br>1：求导函数直接等式两边对x求导，把y看成x的函数<br>2：求dy,先化简，这种题一般要先化简，然后等式两边同时微分<br>注意别算错了，计算要准确。</p><h2><span id="4参数方程求导">4.参数方程求导</span></h2><p>参数方程求导的过程种一定要搞清楚是对求导，以及最后结果的原理是除dt乘dt这样的结构，而二阶导注意是一阶导的结构再对t求导，不是y再对t求导。<br>然后加强计算能力就可以了（相信我有些求导，导着导者就会发现有一个复合函数导错了），参数求导只要把求导的原理搞清楚了，一般就没什么问题。即使是有一些隐含数也一样。<br>这里笔者有一个小tip:可以在每次的结果后面加上是谁对谁求导比如（dy/dx）。这样对于一些复杂题的处理会更加清晰。</p><h2><span id="5分段函数求导">5.分段函数求导</span></h2><p>分段区间正常求导，分段点用导数的定义求导（这个很重要，且分段点导数再这个点是一个值不是一个公式注意）。记住公式不要错，思路要清晰。</p><h2><span id="6变限积分求导">6.变限积分求导</span></h2><p>这是一个非常重要的求导过程，变限积分求导要记住一个很重要的原则，X只允许出现在积分的上下限里。<br>1.如果在函数外就提出来,用链式求导法则求导即可。<br>2.在函数的自变量替换再整体对U求导（这里一定要注意积分上下限也要替换）。<br>在保证了上面这个原则后，就可以用变限积分求导的公式（这里可以巧记把上下限代入自变量然后相减再整体求导）。</p><h2><span id="7高阶导数求导">7.高阶导数求导</span></h2><p>欢迎来到求导数里最难的一种求导，其实也不是很难，来听听笔者的教学吧。<br>在高阶导数求导的过程中主要有三种方法<br>1：归纳法<br>这里推介读者还是记一下以下几个公式为妙<br><img src="https://s2.loli.net/2023/02/16/n74PIETm9h6arVc.png" alt><br>2：莱布尼茨公式<br>这个一般会有一个幂函数，但是如果是在莫一个点的话，推荐用泰勒公式。计算量更少<br><img src="https://s2.loli.net/2023/02/16/vdWQu5tDF8y7nfp.png" alt><br>3：泰勒公式<br>高阶导数的必备技能，这里对读者泰勒展开的公式要求更高，推荐可以展开四项以上。<br>泰勒公式主要用于求函数在某一点的n阶导数</p><h2><span id="结语">结语</span></h2><p>任何计算都有计算方法的基础要求，比如分解，化简，三角公式代换，幂指化，等等。希望读者可以加强这方面重视。<br>求导这个部分整体来说不难，因为方法比较固定。多加练习自然没有问题。</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高数求极限教学</title>
      <link href="/2023/01/20/%E9%AB%98%E6%95%B0%E6%B1%82%E6%9E%81%E9%99%90%E6%95%99%E5%AD%A6/"/>
      <url>/2023/01/20/%E9%AB%98%E6%95%B0%E6%B1%82%E6%9E%81%E9%99%90%E6%95%99%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2><span id="前言">前言</span></h2><p>本教学要求读者有一定的知识储备，和做题经验。</p><h2><span id="七种未定式讲解">七种未定式讲解</span></h2><p>首先我们拿到一个求极限的题，第一步当然是判断极限类型。经过总结我们可以把它分成七种未定型。</p><h3><span id="1-00型">1 0/0型</span></h3><p>有以下处理方法：</p><h4><span id="11用泰勒展开">1.1：用泰勒展开</span></h4><p>想用好泰勒公式需要以下几点条件<br>首先需要对以下8个公式非常的熟练<br><img src="https://s2.loli.net/2023/01/20/dfWpGTyz8KUwHvQ.png" alt><br>其次需要明白泰勒的展开原则<br>原则一：上下同阶即分子分母的阶数相同，（这里需要一定的观察力，在泰勒单式展开的表达式又需要开平方或立方时需要把同阶的项都写出来）<br>原则二：用泰勒公式求未知数时，分子需要相互展开到彼此抵消不了<br>当你符合了以下几点要求时，泰勒公式这一块你就没问题了。</p><h4><span id="12-洛必达求导">1.2： 洛必达求导</span></h4><p>想用好洛必达求极限必然要知道这个理论的使用场景，这里笔者总结了以下几种可以使用的场景和不能使用的场景。<br>可以使用的场景：<br>1：幂指函数求导，指数化后分子出现了单个反函数，且分母不为一阶时<br>2：自变量x不是趋于0，而是某给值时可用<br>3：自变量x趋于无穷时，可用<br>不可以使用场景：<br>除了上面三种基本上不用。</p><h4><span id="13-等价无穷小">1.3 等价无穷小</span></h4><p>等价无穷小其实就是泰勒公式的简化版，在解题中一般用于快速替换变量和构造等价无穷小。比如+1-1大法，替换反函数等。</p><h4><span id="14-导数定义">1.4 导数定义</span></h4><p>用导数的定义求极限<br>首先一定要搞清楚导数定义的表达式。（分母是分子自变量的差值）<br>然后要学会构造函数向导数定义上靠，（在构造的过程中要注意自变量的趋向）<br>下面是读者总结的一些适用场景：<br>1：用导数定义求极限往往时0/0的最后处理方式也就是说洛必达和泰勒都不能用时可以考虑构造导数定义来求极限<br>2：题中出现“函数导数存在”这样的字眼。一般会用到导数定义，切记如果在0/0中一定不能用洛必达。因为题中可能没说二阶导存在，但导数定义可以用一阶导的形式表达二阶导在零点的值。</p><h4><span id="15-拉格朗日">1.5 拉格朗日</span></h4><h3><span id="2-1的无穷未定型">2. 1的无穷未定型</span></h3><p>这种题就直接公式极限=e^A.  A=f(x)Xg(x),或者(f(x)-1)Xg(x)，总之就是零承无穷</p><h3><span id="3-无穷-无穷的未定型">3. 无穷-无穷的未定型</span></h3><p>主要有三种处理方法：<br>1：通分<br>2：有理化<br>3：倒带换</p><h3><span id="4-0-x-无穷-的未定型">4. 0 X 无穷 的未定型</span></h3><p>这里有一个小知识点要记住：在这种未定型中如果0可以用无穷小代替，可以直接换<br>处理方法是转换成0/0，或者 无穷/无穷。后者最好把求导复杂的放分子，因为这里一般用洛必达法则求解。</p><h3><span id="5-无穷无穷">5. 无穷/无穷</span></h3><p>一般除了口算有两种处理方法<br>1：最高次幂法<br>2：洛必达法则</p><h3><span id="6amp7-无穷的零次幂-和-零的无穷次幂">6&amp;7. 无穷的零次幂 和 零的无穷次幂</span></h3><p>处理方法一样：<br>指数化（记得后面把e加上）</p><h2><span id="补充">补充</span></h2><p>1：e^x,arctan(x),[x],分段函数的左右极限不同，这一点往往是得分的关键<br>2：第一给重要极限sin(x)/x=1,无穷小乘有界量为0</p><p>最后祝各位在求极限的领域题题秒杀，直接乱杀。 (手动狗头)</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo个人博客搭建总结</title>
      <link href="/2023/01/18/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%80%BB%E7%BB%93/"/>
      <url>/2023/01/18/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2><span id="总结">总结</span></h2><p>1：环境搭建中系统变量和环境变量是重点，没搞好可能工具用不了。<br>2：用cnpm代替npm是个不错的选择，在很多时候都可用代替使用<br>3：hexo初始化提示“npm install”可以用cnpm代替关键文件出现到文件夹就可以了<br>4：要先在git中输入用户名，邮件，还有公钥。完成git连接到git才可以用来下载和上传<br>5：hexo d可能会报上传网络错误，没关系多试几次<br>6: 有一些改动，比如头像，封面，个性标语什么的。本地可能加载不出来，可以上传后用手机或者另一台电脑查看<br>7： 遇到bug，不要慌。冷静分析，搞清楚原理，加百度。一般可以解决问题，不行的话，建议从头再来，回到你认为没有问题的点，从那个点开始重新思考。<br>8： 配置好hexo后建议备份，便于后期回滚。<br>9:  ctrl+L可以快速清空git的历史命令。</p><p>=</p>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
